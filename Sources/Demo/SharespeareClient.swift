// This file was generated by Lark. https://github.com/Bouke/Lark

import Foundation
import LarkRuntime

//
// MARK: - SOAP Structures
//
class GetSpeech: XMLDeserializable {
    let request: String?
    init(request: String?) {
        self.request = request
    }
    required init(deserialize element: XMLElement) throws {
        self.request = try element.elements(forLocalName: "Request", uri: "http://xmlme.com/WebServices").first.map(String.init(deserialize:))
    }
    func serialize(_ element: XMLElement) throws {
        if let request = request {
            let requestNode = try element.createElement(localName: "Request", uri: "http://xmlme.com/WebServices")
            element.addChild(requestNode)
            try request.serialize(requestNode)
        }
    }
}

class GetSpeechResponse: XMLDeserializable {
    let getSpeechResult: String?
    init(getSpeechResult: String?) {
        self.getSpeechResult = getSpeechResult
    }
    required init(deserialize element: XMLElement) throws {
        self.getSpeechResult = try element.elements(forLocalName: "GetSpeechResult", uri: "http://xmlme.com/WebServices").first.map(String.init(deserialize:))
    }
    func serialize(_ element: XMLElement) throws {
        if let getSpeechResult = getSpeechResult {
            let getSpeechResultNode = try element.createElement(localName: "GetSpeechResult", uri: "http://xmlme.com/WebServices")
            element.addChild(getSpeechResultNode)
            try getSpeechResult.serialize(getSpeechResultNode)
        }
    }
}

//
// MARK: - SOAP Client
//
class ShakespeareClient: Client {
    override init(channel: Channel) {
        super.init(channel: channel)
    }
    convenience init() {
        self.init(endpoint: URL(string: "http://www.xmlme.com/WSShakespeare.asmx")!)
    }
    func getSpeech(_ parameter: GetSpeech) throws -> GetSpeechResponse {
        var parameters = [XMLElement]()
        let parameterNode = XMLElement(prefix: "ns0", localName: "GetSpeech", uri: "http://xmlme.com/WebServices")
        parameterNode.addNamespace(XMLNode.namespace(withName: "ns0", stringValue: "http://xmlme.com/WebServices") as! XMLNode)
        try parameter.serialize(parameterNode)
        parameters.append(parameterNode)
        let body = try send(action: URL(string: "http://xmlme.com/WebServices/GetSpeech")!, parameters: parameters)
        let outputNode = body.elements(forLocalName: "GetSpeechResponse", uri: "http://xmlme.com/WebServices").first!
        return try GetSpeechResponse(deserialize: outputNode)
    }
}
